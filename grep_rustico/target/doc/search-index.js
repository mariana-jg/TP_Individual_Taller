var searchIndex = new Map(JSON.parse('[\
["clase",{"doc":"","t":"CCCCCCCCGPPPPNNNNNNNNNNNNNPPGPPPPPPNNNNNNNNNNNNPPGPPPPPPPNNNNNNNNNNNFNNNNNNNFNNNNNNNNNNNFHNNNNNNNNNNPPPGNNNNNNNNNNNNOOHH","n":["caracter","clase_char","errors","paso_evaluado","paso_regex","regex","repeticion","verficacion_inicial","Caracter","Comodin","Dolar","Literal","Serie","borrow","borrow_mut","clone","clone_into","coincide","eq","fmt","from","into","to_owned","try_from","try_into","type_id","Alnum","Alpha","ClaseChar","Digit","Lower","Punct","Simple","Space","Upper","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","ArgumentosInvalidos","CaracterNoProcesable","Error","ErrorEnCorchetes","ErrorEnFuncionOR","ErrorEnLlaves","ErrorEnRepeticion","FallaAbrirArchivo","FallaLecturaArchivo","FormatoDeLineaNoASCII","borrow","borrow_mut","eq","fmt","fmt","from","into","to_string","try_from","try_into","type_id","PasoEvaluado","borrow","borrow_mut","from","into","try_from","try_into","type_id","PasoRegex","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","Regex","agregar_pasos","borrow","borrow_mut","es_valida","es_valida_general","from","into","new","try_from","try_into","type_id","Alguna","Exacta","Rango","Repeticion","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","max","min","puedo_procesar_archivo","verificar_inicio"],"q":[[0,"clase"],[8,"clase::caracter"],[26,"clase::clase_char"],[47,"clase::errors"],[68,"clase::paso_evaluado"],[76,"clase::paso_regex"],[88,"clase::regex"],[100,"clase::repeticion"],[116,"clase::repeticion::Repeticion"],[118,"clase::verficacion_inicial"],[120,"core::fmt"],[121,"core::fmt"],[122,"core::any"],[123,"alloc::string"],[124,"alloc::vec"],[125,"core::str::iter"]],"d":["","","","","","","","","Representa un caracter que puede ser un literal, un …","","","","","","","","","Según el tipo de caracter con el que estemos trabajando, …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Representa una clase de caracteres que puede ser …","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Crater de errores personalizados para casos específicos. …","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Permite evaluar si un paso de la expresión regular se …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Representa un paso de la expresión regular que puede ser …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Representa una expresión regular que se puede evaluar en …","Agrega los pasos a la expresión regular.","","","Verifica si una expresión regular es válida para una …","Verifica si una expresión regular es válida para una …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Crea una nueva expresión regular a partir de una cadena …","","","","","","","Representa una repetición que puede ser exacta, alguna o …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Verifica si se puede procesar el archivo ingresado.","Verifica si la cantidad de argumentos ingresados es …"],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,18,18,18,18,18,18,18,0,13,13,13,13,13,13,13,13,13,13,13,0,0,16,16,16,16,16,16,16,16,16,16,17,17,17,0,17,17,17,17,17,17,17,17,17,17,17,17,19,19,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,3],4],[[1,1],5],[[1,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[[-1,-2],2,[],[]],[[10,10],5],[[10,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[11,11],5],[[11,6],7],[[11,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,12,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[[-1,-2],2,[],[]],[[13,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,[[[14,[13]],15],[[8,[[14,[13]],11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[16,3],[[8,[5,11]]]],[[3,3],[[8,[5,11]]]],[-1,-1,[]],[-1,-2,[],[]],[3,[[8,[16,11]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[17,17],[[-1,-2],2,[],[]],[[17,17],5],[[17,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,[3,[[8,[[14,[12]],11]]]],[[[14,[12]]],[[8,[[14,[12]],11]]]]],"c":[],"p":[[6,"Caracter",8],[1,"tuple"],[1,"str"],[1,"usize"],[1,"bool"],[5,"Formatter",120],[8,"Result",120],[6,"Result",121],[5,"TypeId",122],[6,"ClaseChar",26],[6,"Error",47],[5,"String",123],[5,"PasoRegex",76],[5,"Vec",124],[5,"Chars",125],[5,"Regex",88],[6,"Repeticion",100],[5,"PasoEvaluado",68],[15,"Rango",116]],"b":[[60,"impl-Debug-for-Error"],[61,"impl-Display-for-Error"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
