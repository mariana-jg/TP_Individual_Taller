var searchIndex = new Map(JSON.parse('[\
["clase",{"doc":"","t":"CCCCCCCCGPPPPNNNNNNNNNNNNNPPGPPPPPPNNNNNNNNNNNNPPGPPPNNNNNNNNNNNFHNNNNNNNNNNPPPGNNNNNNNNNNNNOOFNNNNNNNFNNNNNNNNNNNHH","n":["caracter","clase_char","errors","regex","repeticion","step_evaluado","step_regex","verficacion_inicial","Caracter","Dollar","Lista","Literal","Wildcard","borrow","borrow_mut","clone","clone_into","coincide","eq","fmt","from","into","to_owned","try_from","try_into","type_id","Alnum","Alpha","ClaseChar","Digit","Lower","Punct","Simple","Space","Upper","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","ArgumentosInvalidos","CaracterNoProcesable","Error","FallaAbrirArchivo","FallaLecturaArchivo","FormatoDeLineaNoASCII","borrow","borrow_mut","eq","fmt","fmt","from","into","to_string","try_from","try_into","type_id","Regex","agregar_pasos","borrow","borrow_mut","es_valida","es_valida_general","from","into","new","try_from","try_into","type_id","Alguna","Exacta","Rango","Repeticion","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id","max","min","StepEvaluado","borrow","borrow_mut","from","into","try_from","try_into","type_id","StepRegex","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","puedo_procesar_archivo","verificar_inicio"],"q":[[0,"clase"],[8,"clase::caracter"],[26,"clase::clase_char"],[47,"clase::errors"],[64,"clase::regex"],[76,"clase::repeticion"],[92,"clase::repeticion::Repeticion"],[94,"clase::step_evaluado"],[102,"clase::step_regex"],[114,"clase::verficacion_inicial"],[116,"core::fmt"],[117,"core::fmt"],[118,"core::any"],[119,"alloc::string"],[120,"alloc::vec"],[121,"core::str::iter"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","este struct representa una expresion regular","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,16,16,16,16,16,16,16,16,16,16,17,17,17,0,17,17,17,17,17,17,17,17,17,17,17,17,18,18,0,19,19,19,19,19,19,19,0,13,13,13,13,13,13,13,13,13,13,13,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,3],4],[[1,1],5],[[1,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[[-1,-2],2,[],[]],[[10,10],5],[[10,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[11,11],5],[[11,6],7],[[11,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,12,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,[[[14,[13]],15],[[8,[[14,[13]],11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[16,3],[[8,[5,11]]]],[[3,3],[[8,[5,11]]]],[-1,-1,[]],[-1,-2,[],[]],[3,[[8,[16,11]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[17,17],[[-1,-2],2,[],[]],[[17,17],5],[[17,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[[-1,-2],2,[],[]],[[13,6],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[3,[[8,[[14,[12]],11]]]],[[[14,[12]]],[[8,[[14,[12]],11]]]]],"c":[],"p":[[6,"Caracter",8],[1,"tuple"],[1,"str"],[1,"usize"],[1,"bool"],[5,"Formatter",116],[8,"Result",116],[6,"Result",117],[5,"TypeId",118],[6,"ClaseChar",26],[6,"Error",47],[5,"String",119],[5,"StepRegex",102],[5,"Vec",120],[5,"Chars",121],[5,"Regex",64],[6,"Repeticion",76],[15,"Rango",92],[5,"StepEvaluado",94]],"b":[[56,"impl-Debug-for-Error"],[57,"impl-Display-for-Error"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
